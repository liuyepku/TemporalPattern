
/*  utility package -- Copyright (C) 1999-2001 Frank Hoeppner

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

/** \file stlstream.hpp
    \author (c) 1999-2001 Frank Hoeppner <frank.hoeppner@ieee.org>

    \brief I/O routines for STL containers.

    This file provides functions which allow the default output \c
    operator<< with STL container classes. In case i/o polymorphism is
    needed (which is not supported by \c operator<<), optional output
    functions are provided.

    We provide (inline template) functions for stream input (resp.\
    output) of the STL data structures \c pair, \c list, \c vector, \c
    [multi]set, and \c [multi]map. All of these functions presuppose
    that there is a \c operator>> (resp. \c operator<<) for the
    underlying data types, e.g. for type \c T when \c list<T> or \c
    vector<T> is used. When reading a container from a stream,
    elements are always inserted at the end of the container, however,
    the end position does not have any effect if the container is
    ordered. */

#ifndef STLSTREAM_HEADER
#define STLSTREAM_HEADER

/* configuration include */
#ifdef HAVE_CONFIG_H
/*
//FILETREE_IFDEF HAVE_CONFIG_H
*/
#include "config.h"
/*
//FILETREE_ENDIF
*/
#endif

#include <iostream>
#include <list>
#include <vector>
#include <set>
#include <map>
#include <deque>
#include <queue>

extern const char KEYWORD_STL_START[];
extern const char KEYWORD_STL_INTER[];
extern const char KEYWORD_STL_FINAL[];

/** write pair into ostream */
template <class T1, class T2> inline
ostream& operator<<(ostream& os, const pair<T1,T2>& a_pair)
  { return os << "(" << a_pair.first << "," << a_pair.second << ")"; }

/** read pair from istream */
template <class T1, class T2> inline
istream& operator>>(istream& is, pair<T1,T2>& a_pair)
  { 
  read_until(is,"(");
  is >> a_pair.first;
  read_until(is,",");
  is >> a_pair.second;
  read_until(is,")"); 
  return is;
  }

/** write iterator-range into ostream 

    The start, intermediate, and final string can be chosen freely.
    The standard i/o operators use the default values.  */

template <class ITERATOR> inline
ostream& 
stl_container_output
  (
  ostream& os,
  const ITERATOR& a_container_begin,
  const ITERATOR& a_container_end,
  const char * const a_start = KEYWORD_STL_START,
  const char * const a_inter = KEYWORD_STL_INTER,
  const char * const a_final = KEYWORD_STL_FINAL 
  )
  {
  os << a_start;
  ITERATOR i;
  for (i=a_container_begin;i!=a_container_end;++i)
    {
    os << a_inter << (*i);
    }
  os << " " << a_final;
  return os;
  }

/** write container into ostream */
template <class CONTAINER> inline
ostream& 
stl_container_output
  (
  ostream& os,
  const CONTAINER& a_container,
  const char * const a_start = KEYWORD_STL_START,
  const char * const a_inter = KEYWORD_STL_INTER,
  const char * const a_final = KEYWORD_STL_FINAL 
  )
  {
  return stl_container_output(os,a_container.begin(),a_container.end(),
    a_start,a_inter,a_final);
  }

/** read container from istream.

    In the following while loop it is necessary to build a new
    container element with each loop to assure that all attributes
    have default values. If we do not instantiate \c element within
    the loop, probably not all attributes will be set by the read
    operation. (The following case might occur: Reading the first
    element, an attribute is set to a value that differs from the
    default. The next element contains no value for this attribute, so
    by definition the default value should be used. If the element is
    not constructed each time, the previous setting would remain.) */

template <class CONTAINER> inline
istream& 
stl_container_input
  (
  istream& is,
  CONTAINER& a_container,
  const char * const a_start = KEYWORD_STL_START,
  const char * const a_inter = KEYWORD_STL_INTER,
  const char * const a_final = KEYWORD_STL_FINAL 
  )
  {
  read_until(is,a_start);
  while (!is_followed_by(is,a_final,false)) 
    {
    typename CONTAINER::value_type element;
    is >> element;
    a_container.insert(a_container.end(),element);
    is_followed_by(is,a_inter,false); // remove if found
    }
  return is;
  }

/* We could have implemented the above functions as an [[operator<<]],
but then this function would be applied to every type with missing
[[operator<<]] by the compiler. To restrict the applicability, we
implement the following inline template functions for [[list]],
[[vector]], [[set]], ..., each of them calling
[[stream_stl_container]]. */

template <class T> inline
ostream& operator<<(ostream& os, const list<T>& a_list)
  { return stl_container_output(os,a_list); }

template <class T> inline
istream& operator>>(istream& is, list<T>& a_list)
  { return stl_container_input(is,a_list); }

template <class T> inline
ostream& operator<<(ostream& os, const vector<T>& a_vector)
  { return stl_container_output(os,a_vector); }

template <class T> inline
istream& operator>>(istream& is, vector<T>& a_vector)
  { return stl_container_input(is,a_vector); }

template <class T1,class T2> inline
ostream& operator<<(ostream& os, const set<T1,T2>& a_set)
  { return stl_container_output(os,a_set); }

template <class T1,class T2> inline
istream& operator>>(istream& is, set<T1,T2>& a_set)
  { return stl_container_input(is,a_set); }

template <class T1,class T2> inline
ostream& operator<<(ostream& os, const multiset<T1,T2>& a_set)
  { return stl_container_output(os,a_set); }

template <class T1,class T2> inline
istream& operator>>(istream& is, multiset<T1,T2>& a_set)
  { return stl_container_input(is,a_set); }

template <class T1,class T2,class T3> inline
ostream& operator<<(ostream& os, const map<T1,T2,T3>& a_map)
  { return stl_container_output(os,a_map); }

template <class T1,class T2,class T3> inline
istream& operator>>(istream& is, map<T1,T2,T3>& a_map)
  { return stl_container_input(is,a_map); }

template <class T1,class T2,class T3> inline
ostream& operator<<(ostream& os, const multimap<T1,T2,T3>& a_map)
  { return stl_container_output(os,a_map); }

template <class T1,class T2,class T3> inline
istream& operator<<(istream& is, multimap<T1,T2,T3>& a_map)
  { return stl_container_input(is,a_map); }

template <class T> inline
ostream& operator<<(ostream& os, const deque<T>& a_deque)
  { return stl_container_output(os,a_deque); }

template <class T> inline
istream& operator<<(istream& is, deque<T>& a_deque)
  { return stl_container_input(is,a_deque); }

template <class T> inline
ostream& operator<<(ostream& os, const queue<T>& a_queue)
  { return stl_container_output(os,a_queue); }

template <class T> inline
istream& operator<<(istream& is, queue<T>& a_queue)
  { return stl_container_input(is,a_queue); }

/** write container into stream 

    In case there is no \c operator<< for the underlying data type
    but a method [[void write(ostream&)]], one can optionally use the
    following [[write]] functions. If a container stores pointer, they
    can be dereferenced and written into the output stream via
    [[write_dereference]]. (Both [[write]] functions support
    polymorphism.)  These functions assume that the underlying data
    type is a class!  */

template <class CONTAINER> inline
void write(ostream& os,const CONTAINER& a_container)
  {
  os << "{";
  typename CONTAINER::const_iterator i;
  for (i=a_container.begin();i!=a_container.end();++i)
    {
    os << " ";
    (*i).write(os);
    }
  os << " }";
  }

/** write dereferenced pointer-container into stream */ 
template <class CONTAINER> inline
void write_dereference(ostream& os,const CONTAINER& a_container)
  {
  os << "{";
  typename CONTAINER::const_iterator i;
  for (i=a_container.begin();i!=a_container.end();++i)
    {
    os << " ";
    (*i)->write(os);
    }
  os << " }";
  }

#endif /* STLSTREAM_HEADER */
